component pokeys_async2 "PoKeys IO driver, by Mit Zot";

pin out bit in-# [55];
pin out unsigned ain-# [3];
pin out bit err;
pin in unsigned devSerial;
pin out bit alive;
function _;
license "GPL";

option extra_link_args "-lPoKeysHal";

;;

#include <unistd.h>   /* UNIX standard function definitions */
#include "PoKeysLibHal.h"

sPoKeysDevice * dev=0;
int i=0;

void user_mainloop(void) 
{ 

   int RTC_count =10;
   int RTC_Trig = 10;
    #ifndef RTAPI
    while(0xb){
       FOR_ALL_INSTS() {

           // while(dev == NULL)dev = PK_ConnectToDeviceWSerial(devSerial, 2000);  //waits for usb device
            

            alive=1; 
            if(RTC_count>=RTC_Trig){
                rtapi_print_msg(RTAPI_MSG_ERR, "PoKeys: %s:%s: PK_RTCGetAsync\n", __FILE__, __FUNCTION__);
                if (PK_RTCGetAsync(__comp_inst->dev)==0){
                    rtapi_print_msg(RTAPI_MSG_ERR, "PoKeys: %s:%s: PK_RTCGetAsync OK\n", __FILE__, __FUNCTION__);
                    RTC_count = 0;
                }
                else if (PK_RTCGet(__comp_inst->dev)==PK_OK){
                    rtapi_print_msg(RTAPI_MSG_ERR, "PoKeys: %s:%s: PK_RTCGet OK\n", __FILE__, __FUNCTION__);
                    RTC_count = 0;
                }
                else{
                    rtapi_print_msg(RTAPI_MSG_ERR, "PoKeys: %s:%s: PK_RTCGet FAILED\n", __FILE__, __FUNCTION__);
                }
            }
            else{
                RTC_count++;
            }

            PK_ReceiveAndDispatch(__comp_inst->dev); // checks for timeout and retry
            PK_TimeoutAndRetryCheck(__comp_inst->dev, 6000); // checks for timeout and retry

            alive=0;
            usleep(100); 
        
        }
    }
    #endif
    exit(0);
}

FUNCTION(_) {
            PK_ReceiveAndDispatch(__comp_inst->dev); // checks for timeout and retry
            PK_TimeoutAndRetryCheck(__comp_inst->dev, 6000); // checks for timeout and retry

            if (PK_RTCGetAsync(__comp_inst->dev)==0){
                    rtapi_print_msg(RTAPI_MSG_ERR, "PoKeys: %s:%s: PK_RTCGetAsync OK\n", __FILE__, __FUNCTION__);
                 
                }
                else if (PK_RTCGet(__comp_inst->dev)==PK_OK){
                    rtapi_print_msg(RTAPI_MSG_ERR, "PoKeys: %s:%s: PK_RTCGet OK\n", __FILE__, __FUNCTION__);
                
                }
                else{
                    rtapi_print_msg(RTAPI_MSG_ERR, "PoKeys: %s:%s: PK_RTCGet FAILED\n", __FILE__, __FUNCTION__);
                }
}
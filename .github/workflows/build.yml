name: Build and Test PoKeysLib on LinuxCNC

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 */14 * *'  # Run every two weeks

jobs:
  update-pokeyslib:
    runs-on: self-hosted  # Use the self-hosted LinuxCNC runner

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Initialize submodules
      run: git submodule update --init --recursive

    - name: Commit and push updates
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add pokeyslib
        git commit -m "Update PoKeysLib subfolder"
        git push

  build:
    runs-on: self-hosted  # Use the self-hosted LinuxCNC runner
    needs: update-pokeyslib

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Initialize submodules
      run: git submodule update --init --recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        xargs -a prerequisites.txt sudo apt-get install -y

    - name: Authenticate GitHub CLI
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

    - name: Build PoKeysLib
      run: |
        mkdir build && cd build
        cmake ..
        make
      continue-on-error: true  # Continue to next steps even if the build fails

    - name: Save build logs
      run: |
        if [ -f build.log]; then
          cat build.log
        fi
      if: failure()

    - name: Create GitHub Issue on Failure
      if: failure()
      run: |
        echo "Build failed, attaching logs."
        LOG_FILE="build.log"
        if [ -f $LOG_FILE]; then
          gh issue create --title "Build Error: ${{ github.sha }}" --body-file $LOG_FILE --label "build-error" --assignee @your-username
        else
          echo "No build log found."

    - name: Build PoKeysLib for Linux
      run: |
        cd pokeyslib
        mkdir build && cd build
        cmake ..
        make

    - name: Run actions/checkout@v2
      run: actions/checkout@v2

    - name: Sync repository
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "Sync repository"
        git push

    - name: Get Git version info
      run: git version

    - name: Copy .gitconfig
      run: cp /home/zarfld/.gitconfig /home/zarfld/actions-runner2/_work/_temp/e57545ec-8da1-4ecc-86a7-d75576d1a366/.gitconfig

    - name: Override HOME
      run: export HOME=/home/zarfld/actions-runner2/_work/_temp/e57545ec-8da1-4ecc-86a7-d75576d1a366

    - name: Add safe directory
      run: git config --global --add safe.directory /home/zarfld/actions-runner2/_work/pokeyslib-fork/pokeyslib-fork

    - name: Get remote.origin.url
      run: git config --local --get remote.origin.url

    - name: Remove refs
      run: git update-ref -d refs/heads/main

    - name: Clean repository
      run: git clean -fdx

    - name: Disable garbage collection
      run: git config --global gc.auto 0

    - name: Set up auth
      run: |
        git config --local --name-only --get-regexp core\.sshCommand
        git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
